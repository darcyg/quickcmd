#!/usr/bin/env python
# -*- coding: utf-8 -*-

import curses
import subprocess
import os
import os.path
import sys
import argparse
from copy import copy

version = '1.0.0'

class AliasNotFound(Exception):
    """Exception raised when alias/command is not found
    """
    def __init__(self, alias, number):
        if number > 1:
            num_str = ' number ' + str(number)
        else:
            num_str = ''

        Exception.__init__(self, 'Alias \'' + alias + '\'' + num_str + ' not found')

class PrintingError(Exception):
    """Exception raised when curses cannot print text
    """
    def __init__(self, error, y, x, text):
        Exception.__init__(self, 'Printing error [y: ' +
                           str(y) + ', x: ' + str(x) +
                           ', text: \'' + text +
                           ', msg: ' + error.message + '\']')

class WrongItemNumber(Exception):
    """Exception raised when wrong item number is given
    """
    def __init__(self, number):
        Exception.__init__(self, 'Wrong item number, ' + str(number))

class Layout:
    """Data necessary to display one screen
    """
    def __init__(self, items=[], selectables=[], groups=[]):
        self.items = items
        self.selectables = selectables
        self.groups = groups

class ConfigItem:
    """Base class for the items which can be met in config file
    """
    view = False # defines current view; False: alias, True: command
    selectable = False # says whether item is selectable in gui or not
    bold = False # says whether item should be displayed in bold or not

class Empty(ConfigItem):
    """Represents empty line in the config file
    """
    def __str__(self):
        return ''

class Command(ConfigItem):
    """Represents alias & command in the config file
    """
    selectable = True

    def __init__(self, alias, cmd, line_number):
        self.alias = alias
        self.cmd = cmd
        self.line_number = line_number # starting from 1, line number in config file
#        self.underline_from = -1 # this is added only to search results
#        self.underline_len = 0   # this is added only to search results

    def __str__(self):
        return [self.alias, self.cmd][self.view]
            
class Comment(ConfigItem):
    """Represents displayable comment in the config file
    """
    bold = True

    def __init__(self, text):
        self.text = text

    def __str__(self):
        return self.text

class QuickCmd(object): # must inherit from object to support properties
    """Engine, manages app data and gui
    """
    def __init__(self, config_path):
        self.config_path = ''     # path to the config file
        self._selection_prev = -1 # previously selected item (see properties)
        self._selection = -1      # currently selected item (see properties)
        self.selected_line = 0    # currently selected line (see properties)
        self.stdscr = None        # current curses screen
        self.command = ''         # command which at the end should be spawn whith this application
        self.action = None        # action to be taken at the exit
        self.display_width  = 0   # terminal width
        self.display_height = 0   # terminal height
        self.display_offset = 0   # vertical offset
        self.refresh_gui = False  # forces printing whole GUI, not only items which changed
        self.layouts = []         # sets of (items, selectables, groups) vectors
        self._active_layout = 0   # index of active layout
        self.search_text = None   # None means not out of searching mode

        self.print_item = self.print_item_std  # printing function

        if not config_path:
            config_path = os.path.expanduser('~' + os.path.sep + '.quickcmd')

            if not os.path.exists(config_path):
                with open(config_path, 'w') as fh:
                    fh.write(default_config)

        self.config_path = os.path.expanduser(config_path)
        self.read_config()

    @property
    def selection_prev(self):
        return self._selection_prev
        
    @selection_prev.setter
    def selection_prev(self, val):
        self._selection_prev = val

    @property
    def selection(self):
        return self._selection

    @selection.setter
    def selection(self, selection):
        self._selection_prev = self._selection
        self._selection = selection

        display_offset = self.display_offset

        if self._selection >= 0:
            if self._selection < self.display_offset:
                self.display_offset = self._selection
            elif self._selection >= self.display_height + self.display_offset:
                self.display_offset = self._selection - self.display_height + 1
        else:
            self.display_offset = 0

        self.refresh_gui = (display_offset != self.display_offset)

    @property
    def active_layout(self):
        if self.search_text == None:
            return self._active_layout
        else:
            return len(self.layouts)-1 # dynamic layout

    @active_layout.setter
    def active_layout(self, active_layout):
        self._active_layout = active_layout

    @property
    def items(self):
        return self.layouts[self.active_layout].items

    @property
    def selectables(self):
        return self.layouts[self.active_layout].selectables

    @property
    def groups(self):
        return self.layouts[self.active_layout].groups

    def update_gui_size(self):
        """Resets GUI size and updates dependencies
        """
        self.select_by_line()
        (self.display_height, self.display_width) = self.stdscr.getmaxyx()
        self.display_offset = 0         # reset offset
        self.selection = self.selection # recalculate offset

    def display_gui(self):
        """Displays curses based GUI
        """
        try:
            self.enable_curses()
            self.setup_curses()
            self.update_gui_size()
            self.print_gui()
            self.wait_for_user()
        except KeyboardInterrupt: # CTRL+C when GUI is visible
            pass
        finally:
            self.disable_curses()

    def enable_curses(self):
        """Enables curses library to display GUI.
           This code is based on curses.wrapper code
        """
        self.stdscr = curses.initscr()
        curses.noecho()
        curses.cbreak()
        self.stdscr.keypad(1)
        try:
            curses.start_color()
        except:
            pass

        self.setup_curses()

    def disable_curses(self):
        """Cleans up after curses, so returning to the console is save.
           This code is based on curses.wrapper code
        """
        self.stdscr.keypad(0)
        curses.echo()
        curses.nocbreak()
        curses.endwin()

    def setup_curses(self):
        """Does application specyfic configuration of curses
        """
        curses.curs_set(0)

    def filter_items(self, from_scratch=False):
        """Filters items according using filter text
           when from_scratch == False, it re-uses results from previous filtering
        """
        if from_scratch:
            layout = copy(self.layouts[self._active_layout]) # clone original layout
            layout.items = [item for item in layout.items if item.selectable]
            self.layouts[self.active_layout] = layout
        
        items = self.items
        
        for item in items:
            item.underline_from = item.alias.lower().find(self.search_text)
            item.underline_len = len(self.search_text)

        items = filter(lambda i: i.underline_from>=0, items)
        selectables = range(len(items))
        groups = [0]
        self.layouts[self.active_layout] = Layout(items, selectables, groups)

    def select_by_line(self, line_number=0):
        """Selects item corresponding to the line number in config file
           By default first selectable item is selected
        """
        if len(self.selectables):
            try:
                self.selection = [item.line_number if item.selectable else -1 for item in self.items].index(line_number)
            except ValueError:
                self.selection = self.selectables[0]
        else:
            self.selection = -1

    def save_selection_by_line(self):
        """Saves line number, the item of which is selected
        """
        if self.selection >=0:
            self.selected_line = self.items[self.selection].line_number
        else:
            self.selected_line = 0

    def restore_selection_by_line(self):
        """Selects item, line number of which was saved by save_selection_by_line
        """
        self.select_by_line(self.selected_line)

    def wait_for_user(self):
        """Interacts with the user when GUI is displayed
        """
        selection2group = lambda selection: ([selection-g>=0 for g in self.groups] + [False]).index(False)-1
        
        while(True):

            selected = self.selection >= 0
            k = self.stdscr.getkey()
            #TODO: Shortcuts like SHIFT+RETURN are not supported, 
            #      termios, pygame, curses are not good enough
            #      probably keyboard driver can be accessed directly (ioctl?) as an alternative

            alphanum_range  = range(ord('a'), ord('z')+1)
            alphanum_range += range(ord('A'), ord('Z')+1)
            alphanum_range += range(ord('0'), ord('9')+1)
            alphanum = [chr(x) for x in alphanum_range] + [' ', '_', '-', '.']

            if (self.search_text != None) and k in alphanum: # this must be the first case
                if self.items: #searching in empty list doesn't make sense
                    self.save_selection_by_line()
                    self.search_text += k.lower()
                    self.filter_items()
                    self.restore_selection_by_line()
                    self.print_gui()
            elif k == '/':
                self.save_selection_by_line()

                if self.search_text == None:
                    self.search_text = ''
                    self.filter_items(True)
                else:
                    self.search_text = None

                self.restore_selection_by_line()
                self.print_gui()
            elif k == 'KEY_BACKSPACE':
                self.save_selection_by_line()
                if self.search_text:
                    self.search_text = self.search_text[:-1]
                    self.filter_items(True)
                else:
                    self.search_text = None
                self.restore_selection_by_line()
                self.print_gui()
            elif k == 'q':
                break
            elif selected and k in ['\n', 'x']: # RETURN or X
                # Spawns the app with the command selected by user
                self.command = self.items[self.selection].cmd
                self.action = self.action_execute
                break
            elif k == 'p':
                self.command = self.items[self.selection].cmd
                self.action = self.action_print
                break
            elif k in ['KEY_IC', 'i']: # INSERT, using letter key is not reccomended, it interferes with xte
                self.command = self.items[self.selection].cmd
                self.action = self.action_insert
                break
            elif k == 'v':
                self.save_selection_by_line()
                self.active_layout = (self.active_layout + 1) % (len(self.layouts)-1) # last layout is dynamic
                self.update_gui_size()
                self.restore_selection_by_line()
                self.print_gui()
            elif selected and k in ['KEY_UP', 'k']: # ARROW_UP or K
                # Moves selection up by one item
                i = self.selectables.index(self.selection)
                if i:
                    self.selection = self.selectables[max(i-1, 0)]
                    self.print_gui_diff()
                else:
                    self.display_offset = max(self.display_offset-1, 0)
                    self.print_gui()
            elif selected and k in ['KEY_DOWN', 'j']: # ARROW_DOWN or J
                # Moves selection down by one item
                i = self.selectables.index(self.selection)
                self.selection = self.selectables[min(i+1, len(self.selectables)-1)]
                self.print_gui_diff()
            elif selected and k in ['KEY_PPAGE', 'KEY_SR', 'K']: # PAGE_UP or SHIFT+ARROW_UP or SHIFT+K
                # Moves selection up by one group
                i = selection2group(self.selection)
                self.selection = self.groups[max(i-1, 0)]
                self.print_gui_diff()
            elif selected and k in ['KEY_NPAGE', 'KEY_SF', 'J']: # PAGE_DOWN or SHIFT+ARROW_DOWN or SHIFT+J
                # Moves selection down by one group
                i = selection2group(self.selection)
                self.selection = self.groups[min(i+1, len(self.groups)-1)]
                self.print_gui_diff()
            elif k == 'KEY_HOME':
                self.selection = self.selectables[0]
                self.display_offset = 0
                self.print_gui()
            elif k == 'KEY_END':
                self.selection = self.selectables[-1]
                self.print_gui_diff()
            elif k == 'e':
                # Opens config file in VI for editing
                self.disable_curses()
                os.system('vi +' + str(self.items[self.selection].line_number) + ' ' + self.config_path)
                self.enable_curses()
                self.read_config()
                self.print_gui()
            elif k == '\t': # TAB
                # Switches between alias/command views
                ConfigItem.view = not ConfigItem.view
                self.print_gui()
            elif k == ' ': # SPACE
                # For future use
                pass
            elif k == 'KEY_DC': # DELETE
                # For future use
                pass
            elif k == 'KEY_LEFT':
                # For future use
                pass
            elif k == 'KEY_RIGHT':
                # For future use
                pass
            elif k == 'kUP5': # CTRL+UP_ARROW
                # For future use
                pass
            elif k == 'kDN5': # CTRL+DOWN_ARROW
                # For future use
                pass

    def read_config(self):
        """Reads config file
        """
        items = []
        selectables = []
        groups = []

        displayable_content = False
        if os.path.isfile(self.config_path):
            f_config = open(self.config_path, 'r')
            line_number = 0
            for raw_line in f_config:
                line_number += 1
                line = raw_line.strip()
                if line:
                    if line[0] == '#':
                        if len(line)>1 and line[1] == '#':
                            # Non-displayable comment
                            pass
                        else:
                            # Displayable comment
                            displayable_content = True
                            items.append(Comment(line[1:]))
                    else:
                        displayable_content = True
                        sep = line.find(' ')
                        if sep < 0:
                            # Alias is same as the command
                            alias = line
                            command = line
                        else:
                            # New alias & command pair
                            alias = line[:sep].strip()
                            command = line[sep:].strip()

                        items.append(Command(alias, command, line_number))
                else:
                    # Empty line
                    if displayable_content: # Ignore empty lines before actual content
                        items.append(Empty())

            f_config.close()

            selectables = [i for (i, item) in enumerate(items) if item.selectable]
            groups = [x for x,y in zip(selectables, [-2] + selectables[:-1]) if x-y>1]

            # Layout0: All visible comments
            items0 = items
            selectables0 = selectables
            groups0 = groups
            layout0 = Layout(items0, selectables0, groups0)

            # Layout1: Without comments
            items1 = [item for item in items0 if item.selectable]
            selectables1 = range(len(items1))
            groups1 = [0]
            layout1 = Layout(items1, selectables1, groups1)

            # Layout2: Sorted Layout1
            items2 = sorted(items1, key=lambda item: item.alias)
            selectables2 = selectables1
            groups2 = groups1
            layout2 = Layout(items2, selectables2, groups2)

            # Dynamic Layout: Used for searching/filtering
            layout_dyn = Layout()

            self.layouts = [layout0, layout1, layout2, layout_dyn]        

    def print_item_std(self, item, position, selected):
        """Prints single line of the GUI, standard style
        """

        y = position - self.display_offset
        x = 0

        if (y >= 0) and (y < self.display_height):

            text = str(item)
            w = self.display_width-1 # self.stdscr.addstr sometimes raise an error when full width used
            if len(text) > w:
                text = (text[0:max(w-3,0)] + '...')[0:w]

            if selected:
                self.stdscr.attron(curses.A_STANDOUT) # Highlighting ON

            if item.bold:
                self.stdscr.attron(curses.A_BOLD)     # Bold ON            

            try:            
                self.stdscr.addstr(y, x, text)
            except curses.error, e:
                raise PrintingError(e, y, x, text)

            self.stdscr.attroff(curses.A_STANDOUT)    # Highlighting OFF
            self.stdscr.attroff(curses.A_BOLD)        # Bold OFF

    def print_item_udr(self, item, position, selected):
        """Prints single line of the GUI, style for search results
        """

        y = position - self.display_offset
        x = 0

        if (y >= 0) and (y < self.display_height):
            text = str(item)
            w = self.display_width-1 # self.stdscr.addstr sometimes raise an error when full width used
            if len(text) > w:
                text = (text[0:max(w-3,0)] + '...')[0:w]

            if selected:
                self.stdscr.attron(curses.A_STANDOUT) # Highlighting ON

            underline_from = item.underline_from
            underline_to = item.underline_from + item.underline_len

            x0 = x
            x1 = x + underline_from
            x2 = x + underline_to

            text0 = text[:underline_from]
            text1 = text[underline_from:underline_to]
            text2 = text[underline_to:]

            try:
                self.stdscr.addstr(y, x0, text0)
                self.stdscr.attron(curses.A_BOLD)     # Bold ON            
                self.stdscr.addstr(y, x1, text1)
                self.stdscr.attroff(curses.A_BOLD)        # Bold OFF
                self.stdscr.addstr(y, x2, text2)
            except curses.error, e:
                raise PrintingError(e, y, x, text)

            self.stdscr.attroff(curses.A_STANDOUT)    # Highlighting OFF

    def print_gui(self):
        """Prints whole GUI
        """

        if (self.search_text != None) and (not ConfigItem.view):
            self.print_item = self.print_item_udr
        else:
            self.print_item = self.print_item_std

        self.stdscr.clear()

        for (i, item) in enumerate(self.items):
            self.print_item(item, i, self.selection==i)

        self.stdscr.refresh()
        self.refresh_gui = False

    def print_gui_diff(self):
        """Prints only these items, appearance of which changed
        """

        if self.refresh_gui:
            self.print_gui()
        else:
            i = self.selection_prev
            item = self.items[i]
            self.print_item(item, i, False)

            i = self.selection
            item = self.items[i]
            self.print_item(item, i, True)

            self.stdscr.refresh()

    def find_cmd(self, alias, number=1):
        """Searches for the command by it's alias
        """
        if number<1:
            raise WrongItemNumber(number)

        try:
            selectable_items = [item for item in self.items if item.selectable]
            last = -1
            for i in range(number):
                i = [item.alias for item in selectable_items].index(alias, last+1)
                last = i

        except ValueError, e:
            raise AliasNotFound(alias, number)

        self.command = selectable_items[i].cmd

    def list_aliases(self):
        """Prints all the aliases from the config file
        """
        aliases = list(set([item.alias for item in self.items if item.selectable])) # set does unique()
        aliases.sort()
        for alias in aliases:
            print alias

    def finalize(self):
        """Takes proper action on the specified command
        """
        if self.command and self.action:
            try:
                self.action(self.command)
            except KeyboardInterrupt: # CTRL+C when command is executed (ex. sudo asking for password)
                pass

    def action_execute(self, cmd):
        """Executes command in underlaying shell
        """
        subprocess.call(cmd, shell=True)

    def action_print(self, cmd):
        """Prints command to stdout
        """
        print cmd

    def action_insert(self, cmd):
        """Types command to underlaying shell, which allows for editing it
           Currently this works only for X. You can try evdev.uinput if you
           want to reimplement this method in a way so it is working in 
           terminal without X.
        """

        text = cmd
        text = text.replace('\\', '\\\\')
        text = text.replace('\n', '')
        text = text.replace('\r', '')
        for c in '`$"':
            text = text.replace(c, '\\' + c)
        
        ppid = os.getpid()
        cpid = os.fork()

        if cpid == 0: # Child            
            try:
                while(True): # Wait for parent to finish and release command prompt
                             # TODO: This should also wait for the user to release
                             #       all the keys of the keyboard
                             # TODO: This feature doesn't work in pure terminal without X
                             #       uinput can be used instead
                    os.kill(ppid, 0)
            except OSError, e:
                pass

            os.system('echo "' + text + '" | ttype -n')
            # note: this is exexued in sh, not bash,
            # echo works differently in sh and bash

# TODO: Another action which would export the command as a 'bash alias', using '$ alias name=command'
#       Probably not possible, http://stackoverflow.com/questions/19946321/create-unix-alias-using-a-python3-script
#       alias is a built-in command

def main(args):

    if args.version:
        print version
        exit(0)

    try:
        qc = QuickCmd(args.config)
        if args.list:
            qc.list_aliases()
        else:
            if args.alias == None:
                qc.display_gui()
            else:
                qc.find_cmd(args.alias, args.number)
                v = [args.stdout, args.insert]
                a = ([sum(v)==0] + v).index(True)
                qc.action = [qc.action_execute, qc.action_print, qc.action_insert][a]

            qc.finalize()

    except Exception, e:
        if args.debug:
            raise
        else:
            print 'ERROR: ' + str(e)
            exit(1)


#TODO:
# bash autocompletition


default_config = \
"""
## This is configuration file of quickcmd
##
## Following rules apply here:
## - Spaces at the beginning and end of each line are removed.
## - Lines which start with ## (double hash) are ignered (non-displayable
##   comments).
## - Lines which start with # (single hash) are displayed in bold
##   (displayable comments)
## - Displayable comments separate groups of commands.
## - Empty lines before and after actual displayable content are ignored.
## - Empty lines between displayable lines separate groups of commands and add
##   a gap between them.
## - Lines which are not specified above define commands. They begin with an
##   alias.
## - Alias is an alphanumeric identifier. It is separated from the actual
##   command with any number of spaces.
## - Alias is optional.


## Information for new users:
#-----------------------------------------------------------------------------
# quickcmd is an application which allows you to execute commands defined in
# advance. For more help please type quickcmd --help in terminal, or select
# QuickCmdHelp below.
#
# This screen shows only exemplary configuration of quickcmd. To define your
# own configuration please press 'e', or edit ~/.quickcmd file.
#-----------------------------------------------------------------------------


#Help
QuickCmdHelp         quickcmd --help

#System
Id                   uname -a
ListGroups           cat /etc/group | grep -Po '^[^:]*' | sort
ListMacAddresses     sudo ifconfig | grep -Po 'HWaddr .*' | cut -c 8-
CpusAndCores         cat /proc/cpuinfo | grep -P '(processor|cores).*'

#Media
ResizeImages         for image in *; do convert $image -resize 50% -quality 80 $image; done
Dvd2Avi              mencoder -oac mp3lame -lameopts mode=2:cbr:br=96:vol=0 -ovc lavc -lavcopts vcodec=mpeg4:vbitrate=1200:vhq:autoaspect -vf pp=ci -o ~/<myfile.avi> VTS_01_{1,2,3,4,5}.VOB

#Packages
PackageRemove        apt-get --purge remove <package>
PackageList          dpkg -L <package>
PackageDetails       apt-cache show <package>
PackageSearch        sudo apt-cache search <keyword>

#Misc
CurrencyRates        lynx -dump http://www.nbp.pl/Kursy/Kursya.html | grep -Po "10* (EUR|USD|GBP|CZK).*$"
AlarmClock           echo 'mocp -S; mocp -p' | at 06:30
TemperatureOutside   lynx --dump 'http://api.yr.no/weatherapi/locationforecast/1.8/?lat=60.10;lon=9.58' | grep -m 1 temperature | grep -Po '\-?[\d\.]*'
"""


if __name__ == "__main__":

    description = \
    """
Gives quick access to the commands defined in advance. Each command can 
have own alias. Set of commands and aliases is defined in .quickcmd file
in your home directory.

             Key bindings:
             --------------
             ARROW_UP         - select previous command
alternative: k
             ARROW_DOWN       - select next command
alternative: j

             PAGE_UP          - move selection to the previous group
alternative: SHIFT+ARROW_UP
alternative: SHIFT+k

             PAGE_DOWN        - move selection to the next group
alternative: SHIFT+ARROW_DOWN
alternative: SHIFT+j

             HOME             - scroll to the top
             END              - scroll to the bottom
             
             CTRL+C           - close application
alternative: q

             RETURN           - close application and execute selected command
alternative: x
             INSERT           - close application and type selected command
alternative: i
             p                - close application and print selected command

             /                - turn on/off search mode
             e                - edit configuration file
             TAB              - switch view between aliases and commands
             v                - change layout between:
                                1. All items and displayable comments
                                2. No comments
                                3. No comments, items are sorted
    """

    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('alias', nargs='?', help='Exexute command specyfied by alias')
    parser.add_argument('-l', '--list', action='store_true', help='List available aliases')
    parser.add_argument('-p', '--stdout', action='store_true', help='Print command instead of executing')
    parser.add_argument('-i', '--insert', action='store_true', help='Edit command before execution')
    parser.add_argument('-n', '--number', metavar='N', type=int, default=1, help='Item number (applicable when more than one item\nhave the same alias)')
    parser.add_argument('-c', '--config', metavar='F', type=str, default='', help='Config file; default is ~/.quickcmd')
    parser.add_argument('--debug', action='store_true', help='Print whole call stack when exception occures')
    parser.add_argument('-V', '--version', action='store_true', help='Show version number and exit')
    args = parser.parse_args()

    main(args)


#!/usr/bin/env python
# -*- coding: utf-8 -*-

import curses
import subprocess

class Quickcmd:
    PAGE_SIZE = 5

    def __init__(self, stdscr):
        self.view = 0
        self.selection = 0
        self.items = []
        self.stdscr = stdscr
        self.cmd_stdout = '' # stdout and stderr
        self.cmd_retval = 0

        self.setup_curses()
        self.read_file()
        self.display()
        self.wait_for_user()

    def setup_curses(self):
        curses.curs_set(0)

    def wait_for_user(self):

        while(True):
            k = self.stdscr.getkey()
            if k == '\n': # RETURN
                try:
                    self.cmd_retval = 0
                    self.cmd_stdout = subprocess.check_output(self.items[self.selection][1], stderr=subprocess.STDOUT, shell=True)
                except subprocess.CalledProcessError, e:
                    self.cmd_retval = e.returncode
                    self.cmd_stdout = e.output

                break
            elif k == 'KEY_UP':
                self.selection = max(self.selection-1, 0)
                self.display()
            elif k == 'KEY_DOWN':
                self.selection = min(self.selection+1, len(self.items)-1)
                self.display()
            elif k == 'KEY_PPAGE': # PAGE UP
                self.selection = max(self.selection-self.PAGE_SIZE, 0)
                self.display()
            elif k == 'KEY_NPAGE': # PAGE DOWN
                self.selection = min(self.selection+self.PAGE_SIZE, len(self.items)-1)
                self.display()
            elif k == 'KEY_LEFT':
                pass
            elif k == 'KEY_RIGHT':
                pass
            elif k == 'e':
                os.system('vi')
                self.display()
            elif k == ' ': # SPACE
                pass
            elif k == '\t': # TAB
                self.view = (self.view + 1) % 2
                self.display()
            elif k == 'h':
                pass
            elif k == 'q':
                break
            elif k == 'kUP5': # CTRL + UP_ARROW
                pass
            elif k == 'kDN5': # CTRL + DOWN_ARROW
                pass


    def read_file(self):

        f_commands = open('config', 'r')
        for line in f_commands:
            sep = line.find(' ')
            alias = line[:sep].strip()
            command = line[sep:].strip()
            self.items.append((alias, command))

        f_commands.close()

    def display(self):
        self.stdscr.clear()
        self.stdscr.refresh()

        i = 0
        for item in self.items:
            if i == self.selection:
                self.stdscr.attron(curses.A_STANDOUT);
            else:
                self.stdscr.attroff(curses.A_STANDOUT);

            self.stdscr.addstr(i, 0, item[self.view])

            i += 1

cmd_stdout = ''
cmd_retval = 0
def main(stdscr):
    qc = Quickcmd(stdscr)
    global cmd_stdout
    global cmd_retval
    cmd_stdout = qc.cmd_stdout
    cmd_retval = qc.cmd_retval

curses.wrapper(main)

if cmd_stdout:
    print cmd_stdout, # don't print newline at the end

exit(cmd_retval)


